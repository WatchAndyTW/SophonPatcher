use serde::Serialize;

// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct SophonChunkProto {
    #[prost(message, repeated, tag="1")]
    pub assets: ::prost::alloc::vec::Vec<AssetProperty>,
}
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct AssetProperty {
    #[prost(string, tag="1")]
    pub asset_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub asset_chunks: ::prost::alloc::vec::Vec<AssetChunk>,
    #[prost(int32, tag="3")]
    pub asset_type: i32,
    #[prost(int64, tag="4")]
    pub asset_size: i64,
    #[prost(string, tag="5")]
    pub asset_hash_md5: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct AssetChunk {
    #[prost(string, tag="1")]
    pub chunk_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub chunk_decompressed_hash_md5: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub chunk_on_file_offset: i64,
    #[prost(int64, tag="4")]
    pub chunk_size: i64,
    #[prost(int64, tag="5")]
    pub chunk_size_decompressed: i64,
}
// @@protoc_insertion_point(module)
